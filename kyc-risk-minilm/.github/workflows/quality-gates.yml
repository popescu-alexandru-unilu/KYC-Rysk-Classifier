name: quality-gates

on:
  push:
  pull_request:

jobs:
  tests-and-calibration:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies (API)
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt

      - name: Run unit tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest -q

      - name: Fit temperature on validation subset
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python scripts/fit_temperature.py \
            --checkpoint api/minilm_cls_best.pt \
            --file data/valid.jsonl \
            --batch_size 32 \
            --max_len 256 \
            --limit 200 \
            --out calib.json

      - name: Check fitted temperature bounds
        run: |
          python - << 'PY'
          import json, sys
          with open('calib.json', encoding='utf-8') as f:
              obj = json.load(f)
          T = float(obj.get('temperature', 1.0))
          print('Fitted temperature:', T)
          if not (0.5 <= T <= 3.0):
              print('Temperature out of expected bounds [0.5, 3.0]', file=sys.stderr)
              sys.exit(1)
          PY

      - name: Evaluate model on validation (with override) and export JSON
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          CKPT="api/minilm_cls_best.pt"; [ -f "$CKPT" ] || CKPT="minilm_cls_best.pt"; echo "CKPT=$CKPT"
          python src/eval_valid.py --checkpoint "$CKPT" --file data/valid.jsonl --batch_size 32 --max_len 256 --override --json_out eval_metrics.json

      - name: Enforce quality gates (macro-F1 >= 0.90, high recall >= 0.99)
        run: |
          python - << 'PY'
          import json, sys
          with open('eval_metrics.json', encoding='utf-8') as f:
              m = json.load(f)
          macro = float(m.get('macro_f1', 0.0))
          rec_hi = m.get('recall_high_with_override', 0.0) or 0.0
          acc_o = float(m.get('accuracy_with_override', 0.0))
          print('macro_f1=', macro, 'recall_high_with_override=', rec_hi, 'acc_with_override=', acc_o)
          ok = True
          if macro < 0.90:
              print('Macro-F1 below 0.90', file=sys.stderr); ok = False
          if rec_hi < 0.99:
              print('High recall (with override) below 0.99', file=sys.stderr); ok = False
          if not ok:
              sys.exit(1)
          PY
